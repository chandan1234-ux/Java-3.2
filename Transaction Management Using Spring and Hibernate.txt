// Step-1:-  Database Setup


CREATE DATABASE spring_bank;
USE spring_bank;

CREATE TABLE account (
    id INT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(100),
    balance DOUBLE
);

CREATE TABLE transaction_record (
    id INT AUTO_INCREMENT PRIMARY KEY,
    from_account VARCHAR(100),
    to_account VARCHAR(100),
    amount DOUBLE,
    date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO account (name, balance) VALUES
('Alice', 5000.00),
('Bob', 3000.00);



// Step:-2 Entity Classes


package com.example.bank.entity;

import jakarta.persistence.*;

@Entity
@Table(name = "account")
public class Account {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    private String name;
    private double balance;

    // getters and setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }

    public double getBalance() { return balance; }
    public void setBalance(double balance) { this.balance = balance; }

    @Override
    public String toString() {
        return "Account [id=" + id + ", name=" + name + ", balance=" + balance + "]";
    }
}



// Step:-3 TransactionRecord.java



package com.example.bank.entity;

import jakarta.persistence.*;
import java.util.Date;

@Entity
@Table(name = "transaction_record")
public class TransactionRecord {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;

    @Column(name = "from_account")
    private String fromAccount;

    @Column(name = "to_account")
    private String toAccount;

    private double amount;

    @Temporal(TemporalType.TIMESTAMP)
    private Date date = new Date();

    // constructors
    public TransactionRecord() {}
    public TransactionRecord(String from, String to, double amount) {
        this.fromAccount = from;
        this.toAccount = to;
        this.amount = amount;
    }

    // getters/setters
    // ...
}



// Step:-4 AccountDao.java


package com.example.bank.dao;

import com.example.bank.entity.Account;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.stereotype.Repository;

@Repository
public class AccountDao {

    @PersistenceContext
    private EntityManager entityManager;

    public Account findByName(String name) {
        return entityManager.createQuery(
                "FROM Account WHERE name = :name", Account.class)
                .setParameter("name", name)
                .getSingleResult();
    }

    public void update(Account account) {
        entityManager.merge(account);
    }

    public void saveTransaction(Object entity) {
        entityManager.persist(entity);
    }
}



// Step:-5 BankService.java


package com.example.bank.service;

import com.example.bank.dao.AccountDao;
import com.example.bank.entity.Account;
import com.example.bank.entity.TransactionRecord;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

@Service
public class BankService {

    @Autowired
    private AccountDao accountDao;

    @Transactional  // ensures atomic transaction
    public void transferMoney(String from, String to, double amount) {

        // Fetch both accounts
        Account fromAcc = accountDao.findByName(from);
        Account toAcc = accountDao.findByName(to);

        // Check balance
        if (fromAcc.getBalance() < amount) {
            throw new RuntimeException("Insufficient balance in " + from);
        }

        // Deduct and add
        fromAcc.setBalance(fromAcc.getBalance() - amount);
        toAcc.setBalance(toAcc.getBalance() + amount);

        // Update accounts
        accountDao.update(fromAcc);
        accountDao.update(toAcc);

        // Save transaction record
        TransactionRecord record = new TransactionRecord(from, to, amount);
        accountDao.saveTransaction(record);

        System.out.println("✅ Transaction Successful: " + amount + " transferred from " + from + " to " + to);
    }
}



// Step:-6 Spring Configuration (AppConfig.java)


package com.example.bank.config;

import org.springframework.context.annotation.*;
import org.springframework.orm.hibernate5.HibernateTransactionManager;
import org.springframework.orm.hibernate5.LocalSessionFactoryBean;
import org.springframework.transaction.annotation.EnableTransactionManagement;
import org.springframework.jdbc.datasource.DriverManagerDataSource;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@ComponentScan(basePackages = "com.example.bank")
@EnableTransactionManagement
public class AppConfig {

    @Bean
    public DataSource dataSource() {
        DriverManagerDataSource ds = new DriverManagerDataSource();
        ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
        ds.setUrl("jdbc:mysql://localhost:3306/spring_bank");
        ds.setUsername("root");
        ds.setPassword("yourpassword");
        return ds;
    }

    @Bean
    public LocalSessionFactoryBean sessionFactory() {
        LocalSessionFactoryBean sf = new LocalSessionFactoryBean();
        sf.setDataSource(dataSource());
        sf.setPackagesToScan("com.example.bank.entity");

        Properties props = new Properties();
        props.put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
        props.put("hibernate.hbm2ddl.auto", "update");
        props.put("hibernate.show_sql", "true");

        sf.setHibernateProperties(props);
        return sf;
    }

    @Bean
    public HibernateTransactionManager transactionManager() {
        HibernateTransactionManager tx = new HibernateTransactionManager();
        tx.setSessionFactory(sessionFactory().getObject());
        return tx;
    }
}



//Step:-7 Main Runner


package com.example.bank;

import com.example.bank.config.AppConfig;
import com.example.bank.service.BankService;
import org.springframework.context.annotation.AnnotationConfigApplicationContext;

public class MainApp {
    public static void main(String[] args) {
        AnnotationConfigApplicationContext context =
                new AnnotationConfigApplicationContext(AppConfig.class);

        BankService bankService = context.getBean(BankService.class);

        try {
            bankService.transferMoney("Alice", "Bob", 1000.0);
        } catch (Exception e) {
            System.out.println("❌ Transaction failed: " + e.getMessage());
        }

        context.close();
    }
}



// Step:-8 Maven Dependencies (pom.xml)


<dependencies>
    <!-- Spring Core & Context -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-context</artifactId>
        <version>6.1.3</version>
    </dependency>

    <!-- Spring ORM for Hibernate -->
    <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-orm</artifactId>
        <version>6.1.3</version>
    </dependency>

    <!-- Hibernate ORM -->
    <dependency>
        <groupId>org.hibernate.orm</groupId>
        <artifactId>hibernate-core</artifactId>
        <version>6.3.1.Final</version>
    </dependency>

    <!-- Jakarta Persistence API -->
    <dependency>
        <groupId>jakarta.persistence</groupId>
        <artifactId>jakarta.persistence-api</artifactId>
        <version>3.1.0</version>
    </dependency>

    <!-- MySQL Driver -->
    <dependency>
        <groupId>mysql</groupId>
        <artifactId>mysql-connector-j</artifactId>
        <version>8.4.0</version>
    </dependency>
</dependencies>





